#include <iostream>
#include <cmath>

using namespace std;

#define PI 3.1415926535

// Point 클래스, Rect 클래스는 은닉된 상태
// 공개된 정보는 Point 생성자와 Rect 생성자가 공개됨
// Rect 클래스에는 사각형 면적 계산 area 함수가 존재

// ---> Rect의 대각선 길이를 구하는 Distance 함수 필요

class Point {	// 기본 private ( 기본값으로 외부 참조 불가 )
public:
	int x;
	int y;

	Point(int a, int b) {
		x = a;
		y = b;
	}

	int getX() { return x; }
	int getY() { return y; }

	void setX(int a) { x = a; }
	void setY(int b) { y = b; }
};

class Rect {
	Point p1, p2;						// 멤버 변수
public:

	Rect(Point p_n1, Point p_n2) : p1(p_n1), p2(p_n2) { // 인자가 있는 생성자 ( 인자는 함수의 로컬 변수와 동일)
		p1 = p_n1;
		p2 = p_n2;
	}

	Rect() : p1(0,0), p2(0,0) { }				// 디폴트 생성자 (값이 없을 경우)

	void setP1(Point p) { p1 = p; }				// setter를 통해 상속하는 클래스의 생성자 초기화 
	void setP2(Point p) { p2 = p; }

	int getX() { return abs(p1.x - p2.x); }			// getter를 통해 상속하는 클래스의 메소드로 값을 전달 가능
	int getY() { return abs(p1.y - p2.y); }

	int getX1point() { return p1.x; }
	int getX2point() { return p2.x; }
	int getY1point() { return p1.y; }
	int getY2point() { return p2.y; }

	int area() {						// 멤버 변수 X, 함수 내의 로컬 변수
		int x = abs(p1.x - p2.x);
		int y = abs(p1.y - p2.y);
		return x * y;
	}
};

class RectEx : public Rect {					// Rect 클래스를 상속, private 
public:
	RectEx(Point p_n1, Point p_n2) {			// Rect 클래스의 Point p1, p2에 접근하기 위해서 setP1을 활용하여 초기화(생성자)
		setP1(p_n1);
		setP2(p_n2);
	}

	double distance() {
		int x = getX();					// RectEx 클래스에서 Rect 클래스의 getX 메소드에 접근하여 x 값을 가져옴
		int y = getY();
		return sqrt(pow(x, 2) + pow(y, 2));
	}
};

class Circle : public Rect {
public:
	Circle(Point p_m1, Point p_m2) {
		setP1(p_m1);
		setP2(p_m2);
	}

	double cirLen() {
		int x_m1 = getX1point();
		int x_m2 = getX2point();
		int y_m1 = getY1point();
		int y_m2 = getY2point();

		int cirPointX = abs(x_m1 + x_m2) / 2; // 원 중심의 x 좌표
		int cirPointY = abs(y_m1 + y_m2) / 2; // 원 중심의 y 좌표

		cout << endl;
		cout << "원 중심의 x 좌표 = " << cirPointX << endl;
		cout << "원 중심의 y 좌표 = " << cirPointY << endl;

		double radius = sqrt(pow((cirPointX - x_m1), 2) + pow((cirPointY - y_m1), 2)) / 2;

		cout << "원의 지름 = " << radius * 2 << endl;

		double cLen = 2 * PI * radius;

		return cLen;
	}

	double cirDim() {
		int x_m1 = getX1point();
		int x_m2 = getX2point();
		int y_m1 = getY1point();
		int y_m2 = getY2point();

		int cirPointX = abs(x_m1 + x_m2) / 2; // 원 중심의 x 좌표
		int cirPointY = abs(y_m1 + y_m2) / 2; // 원 중심의 y 좌표

		double radius = sqrt(pow((cirPointX - x_m1), 2) + pow((cirPointY - y_m1), 2)) / 2;
		double cDim = PI * pow(radius, 2);

		return cDim;
	}
};


int func(Rect* r);
int func2(Rect& r);						// 레퍼런스 정의(포인터 X, &를 통한 주소 전달)


int main() {
	int n1 = 10, n2 = 20;

	Point p1(n1, n1), p2(n2, n2);
	//Rect r1 = { {10,10}, {20,20} };	// struct 타입 초기화

	Rect r1(p1, p2);					// Rect 클래스 객체의 초기화(생성자 이용)
	Rect r2;
	RectEx r3(p1, p2);
	Circle r4(p1, p2);

	func(&r1);						// 포인터 변수 전달을 위해 변수(클래스)의 주소 전달
	func2(r1);

	cout << "두 점 p1(10,10)과 p2(20,20)으로 이루어진 사각형의 넓이 (p1, p2 인자가 있는 r1) = " << r1.area() << endl;
	cout << "두 점 p1(10,10)과 p2(20,20)으로 이루어진 사각형의 넓이 (p1, p2 인자가 없는 r2) = " << r2.area() << endl;
	cout << "두 점 p1(10,10)과 p2(20,20) 사이의 원의 중심에 대한 원 둘레 = " << r4.cirLen() << endl;
	cout << "두 점 p1(10,10)과 p2(20,20) 사이의 원의 중심에 대한 원 면적 = " << r4.cirDim() << endl;

	return 0;
}

int func(Rect* r1) {
	cout << "두 점 p1(10,10)과 p2(20,20)으로 이루어진 사각형의 넓이 = " << r1->area() << endl;
	return 0;
}								// 포인터 변수를 통한 접근 시에는 -> 사용

int func2(Rect& r1) {
	cout << "두 점 p1(10,10)과 p2(20,20)으로 이루어진 사각형의 넓이 = " << r1.area() << endl;
	return 0;
}								// 레퍼런스로 받은 함수도 . 으로 접근하여 사용


###########################################################################################################################

#include <iostream>
#include <cmath>

using namespace std;

#define PI 3.141592

// Point 클래스, Rect 클래스는 은닉된 상태
// 공개된 정보는 Point 생성자와 Rect 생성자가 공개됨
// Rect 클래스에는 사각형 면적 계산 area 함수가 존재

// ---> Rect의 대각선 길이를 구하는 Distance 함수 필요

class Point {	// 기본 private ( 기본값으로 외부 참조 불가 )
public:
	int x;
	int y;

	Point(int a, int b) : x(a), y(b) { }
	Point() { }

	int getX() { return x; }
	int getY() { return y; }

	void setX(int a) { x = a; }
	void setY(int b) { y = b; }

	Point operator+(int n) {			// point + int    operation
		Point p1;
		p1.x = x + n;
		p1.y = y + n;
		return p1;
	}

	Point operator+(Point p) {
		Point p1;
		p1.x = p.x + x;
		p1.y = p.y + y;
		return p1;
	}
};

class Rect {
	Point p1, p2;						// 멤버 변수
public:

	Rect(Point p_n1, Point p_n2) : p1(p_n1), p2(p_n2) { // 인자가 있는 생성자 ( 인자는 함수의 로컬 변수와 동일)
		p1 = p_n1;
		p2 = p_n2;
	}

	Rect() : p1(0, 0), p2(0, 0) { }		// 디폴트 생성자 (값이 없을 경우)

	void setP1(Point p) { p1 = p; }		// setter를 통해 상속하는 클래스의 생성자 초기화 
	void setP2(Point p) { p2 = p; }

	int getX() { return abs(p1.x - p2.x); }	// getter를 통해 상속하는 클래스의 메소드로 값을 전달 가능
	int getY() { return abs(p1.y - p2.y); }

	int area() {						// 멤버 변수 X, 함수 내의 로컬 변수
		int x = abs(p1.x - p2.x);
		int y = abs(p1.y - p2.y);
		return x * y;
	}
};

class RectEx : public Rect {			// Rect 클래스를 상속, private 
public:
	RectEx(Point p_n1, Point p_n2) {	// Rect 클래스의 Point p1, p2에 접근하기 위해서 setP1을 활용하여 초기화(생성자)
		setP1(p_n1);
		setP2(p_n2);
	}

	double distance() {
		int x = getX();					// RectEx 클래스에서 Rect 클래스의 getX 메소드에 접근하여 x 값을 가져옴
		int y = getY();
		return sqrt(pow(x, 2) + pow(y, 2));
	}
};

class Circle : public Rect {
private:
	Point cp;
	double rad;
public:
	Circle(Point p_c1, Point p_c2, Point pnt = { 0, 0 }) : Rect(p_c1, p_c2), cp(pnt) {
		cp.setX((p_c1.x + p_c2.x) / 2);
		cp.setY((p_c1.y + p_c2.y) / 2);
		int x = getX();
		int y = getY();
		rad = sqrt(pow(x, 2) + pow(y, 2)) / 2;
	}

	double dia() {
		return rad * 2;
	}

	double cLen() {
		return dia() * PI;
	}

	double cDim() {
		return PI * pow(dia(), 2);
	}
};


//int func(Rect* r);
//int func2(Rect& r);						// 레퍼런스 정의(포인터 X, &를 통한 주소 전달)

int main() {
	int n1 = 10, n2 = 20;
	Point p1(n1, n1), p2(n2, n2);
	// Rect r1 = { {10,10}, {20,20} };	// struct 타입 초기화

	Rect r1(p1, p2);					// Rect 클래스 객체의 초기화(생성자 이용)
	Rect r2;
	RectEx r3(p1, p2);
	Circle r4(p1, p2);

	// func(&r1);							// 포인터 변수 전달을 위해 변수(클래스)의 주소 전달
	// func2(r1);

	cout << "두 점 p1(10,10)과 p2(20,20)으로 이루어진 사각형의 넓이 (p1, p2 인자가 있는 r1) = " << r1.area() << endl;
	cout << "두 점 p1(10,10)과 p2(20,20)으로 이루어진 사각형의 넓이 (p1, p2 인자가 없는 r2) = " << r2.area() << endl;
	cout << "두 점 p1(10,10)과 p2(20,20) 사이의 원의 중심에 대한 원 둘레 = " << r4.cLen() << endl;
	cout << "두 점 p1(10,10)과 p2(20,20) 사이의 원의 중심에 대한 원 면적 = " << r4.cDim() << endl;

	p1.setX(15);
	p1.setY(15);

	Point p3 = p1 + 10;
	Point p4 = p1 + p3;

	cout << "Point 클래스의 연산자 오버로딩 테스트 1 (+) = p1(" <<a p1.x << ", " << p1.y << ") + " << 10
		 << " = " << "(" << p3.x << ", " << p3.y << ")" << endl;

	cout << "Point 클래스의 연산자 오버로딩 테스트 2 (+) = p1(" << p1.x << ", " << p1.y << ") " 
		 << "+ " << "(" << p3.x << ", " << p3.y << ")" 
		 << " = " << "(" << p4.x << ", " << p4.y << ") " << endl;
		
	return 0;
}

//int func(Rect* r1) {
//	cout << "두 점 p1(10,10)과 p2(20,20)으로 이루어진 사각형의 넓이 = " << r1->area() << endl;
//	return 0;
//}										// 포인터 변수를 통한 접근 시에는 -> 사용
//
//int func2(Rect& r1) {
//	cout << "두 점 p1(10,10)과 p2(20,20)으로 이루어진 사각형의 넓이 = " << r1.area() << endl;
//	return 0;
//}										// 레퍼런스로 받은 함수도 . 으로 접근하여 사용


